Navigating with Jackal
======================

Below are the example launch files for three different configurations for navigating Jackal:

- Navigation in an odometric frame without a map, using only move_base_.
- Generating a map using gmapping_.
- Localization with a known map using amcl_.

If you're using :doc:`simulation <simulation>`, bring up Jackal with the front laser enabled for the
following demos.

If you're working with a real Jackal, it's suggested to connect via SSH and launch the jackal_navigation_
launchfiles from on board the robot. You'll need to have bidirectional communication with the robot's
roscore in order to launch rviz on your workstation, of course (see :doc:`network`).

  .. _move_base: http://wiki.ros.org/move_base
  .. _gmapping: http://wiki.ros.org/gmapping
  .. _amcl: http://wiki.ros.org/amcl
  .. _jackal_navigation: http://wiki.ros.org/jackal_navigation


Navigation Without a Map
------------------------

In the odometry navigation demo Jackal attempts to reach a given goal in the world within a user-specified tolerance. The 2D navigation, generated by move_base, takes in information from odometry, laser scanner, and a goal pose and outputs safe velocity commands. In this demo the configuration of move_base is set for navigation without a map in an odometric frame (that is, without reference to a map).

To launch the navigation demo, run:

.. code-block:: bash

    roslaunch jackal_navigation odom_navigation_demo.launch

To send the goals to the navigation, you can set a desired pose for the robot to achieve using 2D Nav Goal in rviz. To visualize with the suggested rviz configuration launch:

.. code-block:: bash

    roslaunch jackal_viz view_robot.launch config:=navigation

The parameters of move_base, local costmap, global costmap and base_local_planner are set for Jackal. You may want to change them in the corresponding ``params/*.yaml`` files.


Making a Map
------------

In the gmapping demo Jackal generates a map using gmapping.

.. code-block:: bash

    roslaunch jackal_navigation gmapping_demo.launch

After running the gmapping, drive the robot around (slowly) to build the map. You can drive the robot either by Interactive Markers in rviz or using a joystick. To visualize with the suggested rviz configuration launch:

.. code-block:: bash

    roslaunch jackal_viz view_robot.launch config:=gmapping

You can save the produced map using map_saver:

.. code-block:: bash

    rosrun map_server map_saver -f mymap

This will create a ``mymap.yaml`` and ``mymap.pgm`` file in your current directory.


Navigation With a Map
---------------------

Using amcl Jackal is able to globally localize itself in a known map. AMCL takes in information from odometry, laser scanner and an existing map and estimates robot's pose.

To start the AMCL demo:

.. code-block:: bash

    roslaunch jackal_navigation amcl_demo.launch [map_file:=/path/to/my/map.yaml]

If you don't specify map_file, it defaults to an included pre-made map of the default "Jackal Race" environment
which Jackal's simulator spawns in. If you're using a real Jackal in your own environment, you'll definitely
want to override this with the map created using the gmapping demo.

Before navigating, you need to initialize the localization system by setting the pose of the robot in the map.
This can be done using 2D Pose Estimate in rviz or by setting the amcl initial_pose parameters. To visualize
with the suggested rviz configuration launch:

.. code-block:: bash

    roslaunch jackal_viz view_robot.launch config:=localization

When rviz appears, select the *Set 2D Pose tool* from the toolbar, and click on the map to indicate to the robot
approximately where it is.
